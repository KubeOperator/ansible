- block:
  - name: Create admin.conf file
    shell: >
      kubectl config set-cluster kubernetes 
      --certificate-authority=/etc/kubernetes/pki/ca.crt 
      --embed-certs=true 
      --server=https://{{ KUBE_APISERVER_IP | trim }}:{{ lb_kube_apiserver_port | trim }} 
      --kubeconfig=/etc/kubernetes/admin.conf &&
      kubectl config set-credentials kubernetes-admin
      --client-certificate=/etc/kubernetes/pki/admin.crt
      --client-key=/etc/kubernetes/pki/admin.key 
      --embed-certs=true 
      --kubeconfig=/etc/kubernetes/admin.conf &&
      kubectl config set-context kubernetes-admin@kubernetes 
      --cluster=kubernetes 
      --user=kubernetes-admin
      --kubeconfig=/etc/kubernetes/admin.conf &&
      kubectl config use-context 
      kubernetes-admin@kubernetes 
      --kubeconfig=/etc/kubernetes/admin.conf
  
  - name: Create scheduler.conf file
    shell: >
      kubectl config set-cluster kubernetes 
      --certificate-authority=/etc/kubernetes/pki/ca.crt 
      --embed-certs=true 
      --server=https://{{ KUBE_APISERVER_IP | trim }}:{{ lb_kube_apiserver_port | trim }} 
      --kubeconfig=/etc/kubernetes/scheduler.conf &&
      kubectl config set-credentials system:kube-scheduler 
      --client-certificate=/etc/kubernetes/pki/kube-scheduler.crt
      --client-key=/etc/kubernetes/pki/kube-scheduler.key 
      --embed-certs=true 
      --kubeconfig=/etc/kubernetes/scheduler.conf &&
      kubectl config set-context system:kube-scheduler@kubernetes 
      --cluster=kubernetes 
      --user=system:kube-scheduler 
      --kubeconfig=/etc/kubernetes/scheduler.conf &&
      kubectl config use-context system:kube-scheduler@kubernetes 
      --kubeconfig=/etc/kubernetes/scheduler.conf
  
  - name: Create controller-manager.conf file
    shell: >
      kubectl config set-cluster kubernetes 
      --certificate-authority=/etc/kubernetes/pki/ca.crt 
      --embed-certs=true 
      --server=https://{{ KUBE_APISERVER_IP | trim }}:{{ lb_kube_apiserver_port | trim }} 
      --kubeconfig=/etc/kubernetes/controller-manager.conf &&
      kubectl config set-credentials system:kube-controller-manager 
      --client-certificate=/etc/kubernetes/pki/kube-controller-manager.crt 
      --client-key=/etc/kubernetes/pki/sa.key 
      --embed-certs=true 
      --kubeconfig=/etc/kubernetes/controller-manager.conf &&
      kubectl config set-context system:kube-controller-manager@kubernetes 
      --cluster=kubernetes 
      --user=system:kube-controller-manager 
      --kubeconfig=/etc/kubernetes/controller-manager.conf &&
      kubectl config use-context system:kube-controller-manager@kubernetes 
      --kubeconfig=/etc/kubernetes/controller-manager.conf
  
  - name: Master node Create kubeconfig directory
    file: 
      name: "/root/.kube"
      state: directory
  
  - name: Master node copy kubeconfig file to .kube directory
    copy:
      src: /etc/kubernetes/admin.conf
      dest: "/root/.kube/config"
      mode: 0644
      remote_src: yes
  when: inventory_hostname in groups['kube-master']

- name: Fetch kubeconfig file
  fetch:
    src: /root/.kube/config
    dest: "{{ (playbook_dir + '/' + cluster_name + '/kubeconfig/' + 'config') }}"
    flat: yes
  when: inventory_hostname == groups['kube-master'][0]

- name: Refresh the first master node kubelet.conf certificate
  shell: >
    kubectl config set-cluster kubernetes 
    --certificate-authority=/etc/kubernetes/pki/ca.crt 
    --embed-certs=true 
    --server=https://{{ KUBE_APISERVER_IP | trim }}:{{ lb_kube_apiserver_port | trim }} 
    --kubeconfig=/etc/kubernetes/kubelet.conf &&
    kubectl config set-credentials system:node:{{ inventory_hostname }} 
    --client-certificate=/var/lib/kubelet/pki/kubelet-client-current.pem
    --client-key=/var/lib/kubelet/pki/kubelet-client-current.pem
    --kubeconfig=/etc/kubernetes/kubelet.conf &&
    kubectl config set-context system:node:{{ inventory_hostname }}@kubernetes 
    --cluster=kubernetes --user=system:node:{{ inventory_hostname }} 
    --kubeconfig=/etc/kubernetes/kubelet.conf &&
    kubectl config use-context system:node:{{ inventory_hostname }}@kubernetes 
    --kubeconfig=/etc/kubernetes/kubelet.conf
  when: inventory_hostname == groups['kube-master'][0]