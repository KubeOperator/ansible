- name: Remove unwanted parameters
  lineinfile:
    path: /etc/kubernetes/kubeadm-config.yaml
    regexp: 'max:'
    state: absent

- name: Upgrade kubeadm config version
  lineinfile:
    path: /etc/kubernetes/kubeadm-config.yaml
    regexp: '^kubernetesVersion'
    line: "kubernetesVersion: {{ kube_upgrade_version }}"

- name: "Migration kubeadm config to {{ kube_upgrade_version }} version"
  shell: >
    kubeadm config migrate
    --old-config=/etc/kubernetes/kubeadm-config.yaml
    --new-config=/etc/kubernetes/kubeadm-config.yaml

- name: "Upgrade the first master node: {{ inventory_hostname }} to {{ kube_upgrade_version }}"
  shell: >
    kubeadm upgrade apply --config=/etc/kubernetes/kubeadm-config.yaml --force
    --ignore-preflight-errors=CoreDNSUnsupportedPlugins,CoreDNSMigration
  when: inventory_hostname == groups['kube-master'][0]

- name: "Upgrade the remaining master nodes: {{ inventory_hostname }} to {{ kube_upgrade_version }}"
  shell: >
    kubeadm upgrade node
    {% if kube_upgrade_version.split('.')[1]|int == 14 %}
    experimental-control-plane
    {% endif %}
  when: 
  - inventory_hostname != groups['kube-master'][0]
  - inventory_hostname in groups['kube-master']

- name: "Upgrade worker node: {{ inventory_hostname }} to {{ kube_upgrade_version }}"
  shell: >
    kubeadm upgrade node
    {% if kube_upgrade_version.split('.')[1]|int == 14 %}
    config --kubelet-version {{ kube_upgrade_version }}
    {% endif %}
  when: 
  - inventory_hostname in (groups['kube-worker'] + groups['new-worker'])
  - inventory_hostname not in groups['kube-master']