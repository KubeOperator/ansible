- name: Get cluster node info
  shell: "{{ bin_dir }}/kubectl get node -o name"
  run_once: true
  ignore_errors: true
  register: kubectl_get_node_output

- block:
  - name: Cancel node role label
    shell: >
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/control-plane- &&
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/master- &&
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker- &&
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/lb- &&
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/etcd-

  - name: Setup master node role
    shell: >
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/control-plane='' --overwrite &&
      {{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/master='' --overwrite
    when: inventory_hostname in groups['kube-master']

  - name: Setup worker node role
    shell: "{{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker='' --overwrite"
    when: inventory_hostname in (groups['kube-worker'] + groups['new-worker'])

  - name: Setup load balancer node role
    shell: "{{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/lb='' --overwrite"
    when: inventory_hostname in groups['lb']

  - name: Setup etcd node role
    shell: "{{ bin_dir }}/kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/etcd='' --overwrite"
    when: inventory_hostname in groups['etcd']
  ignore_errors: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  when: inventory_hostname in kubectl_get_node_output.stdout

- block:
  - name: Copy serviceAccount file
    template:
      src: ko-admin.yaml.j2
      dest: /etc/kubernetes/ko-admin.yaml

  - name: Deploy serviceAccount
    shell: "{{ bin_dir }}/kubectl apply -f /etc/kubernetes/ko-admin.yaml"
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"

- block:
  - name: Get cluster namespace info
    shell: "{{ bin_dir }}/kubectl get namespace"
    register: namespace_output

  - name: Create kube-operator namespace
    shell: "{{ bin_dir }}/kubectl create namespace kube-operator"
    when: '"kube-operator" not in namespace_output.stdout'
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: Create node Gpu label
  shell: "{{ bin_dir }}/kubectl label node {{ inventory_hostname }} hasGpu=yes --overwrite"
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
  - container_runtime == 'docker'
  - has_gpu is defined
  - has_gpu
  - support_gpu == 'enable'