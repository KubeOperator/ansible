- name: Get whether docker has been installed
  shell: 'systemctl status docker|grep Active || echo "NOT FOUND"'
  register: docker_status

- name: Error message
  fail: msg="Docker already installed!"
  when: '"running" in docker_status.stdout'

- name: Prepare containerd directory
  file: name={{ item }} state=directory
  with_items:
  - "{{ bin_dir }}"
  - "/etc/containerd"

- name: Load kernel module overlay
  modprobe: name=overlay state=present

- name: Create containerd directory
  file: name={{ item }} state=directory
  with_items:
  - "{{ base_dir }}/containerd"
  - "{{ base_dir }}/crictl"
  - "{{ base_dir }}/runc"

- name: Download containerd file
  get_url:
    validate_certs: no
    url: "{{ containerd_download_url }}"
    dest: "{{ base_dir }}/containerd"
    timeout: "{{ download_timeout_online }}"

- name: Unarchive containerd file
  unarchive:
    src: "{{ base_dir }}/containerd/containerd-{{ containerd_version }}-linux-{{ architectures }}.tar.gz"
    dest: "{{ base_dir}}/containerd"
    remote_src: yes
  
- name: Copy the containerd file to env
  copy:
    src: "{{ base_dir}}/containerd/bin/{{ item }}"
    dest: "{{ bin_dir }}/"
    remote_src: yes
    mode: "0755"
  with_items:
  - containerd
  - containerd-shim
  - containerd-shim-runc-v1
  - containerd-shim-runc-v2
  - ctr

- name: Copy the containerd-stress file to env
  copy:
    src: "{{ base_dir}}/containerd/bin/{{ item }}"
    dest: "{{ bin_dir }}/"
    remote_src: yes
    mode: "0755"
  with_items:
  - containerd-stress
  when: containerd_version == "1.3.6"

- name: Download crictl file
  get_url:
    validate_certs: no
    url: "{{ crictl_download_url }}"
    dest: "{{ base_dir }}/crictl"
    timeout: "{{ download_timeout_online }}"

- name: Unarchive crictl file
  unarchive:
    src: "{{ base_dir }}/crictl/crictl-{{ crictl_version }}-linux-{{ architectures }}.tar.gz"
    dest: "{{ base_dir}}/crictl"
    remote_src: yes

- name: Copy the crictl file to env
  copy:
    src: "{{ base_dir}}/crictl/crictl"
    dest: "{{ bin_dir }}/"
    remote_src: yes
    mode: "0755"

- name: Download runc file
  get_url:
    validate_certs: no
    url: "{{ runc_download_url }}"
    dest: "{{ base_dir }}/runc"
    timeout: "{{ download_timeout_online }}"

- name: Copy runc file
  copy:
    src: "{{ base_dir}}/runc/runc.{{ architectures }}"
    dest: "{{ bin_dir }}/runc"
    remote_src: yes
    mode: "0755"

- name: Create containerd configuration file
  template: src=config.toml.j2 dest=/etc/containerd/config.toml

- name: Create systemd unit file
  template: src=containerd.service.j2 dest=/etc/systemd/system/containerd.service

- name: Create crictl configuration file
  template: src=crictl.yaml.j2 dest=/etc/crictl.yaml

- name: Enable containerd service
  shell: systemctl enable containerd
  ignore_errors: true

- name: Start containerd service
  shell: systemctl daemon-reload && systemctl restart containerd

- name: Waiting for containerd to running
  shell: "systemctl status containerd.service|grep Active"
  register: containerd_status
  until: '"running" in containerd_status.stdout'
  retries: 10
  delay: 5

- name: Add crictl command completion
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'crictl completion'
    line: 'source <(crictl completion)'