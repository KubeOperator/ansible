- name: Download kubeadm kubelet kubectl file
  get_url:
    url: "{{ k8s_download_url }}"
    dest: "{{ base_dir }}/"
    timeout: "{{ download_timeout_online }}"

- name: Unarchive kubeadm kubelet kubectl file
  unarchive:
    src: "{{ base_dir }}/k8s.tar.gz"
    dest: "{{ base_dir }}/"
    remote_src: yes

- name: Copy kubeadm kubelet kubectl file
  copy:
    src: "{{ base_dir}}/k8s/{{ item }}"
    dest: "{{ bin_dir }}/"
    remote_src: yes
    mode: "0755"
  with_items:
  - kubeadm
  - kubelet
  - kubectl

- name: Prepare some dirs
  file: name={{ item }} state=directory
  with_items:
    - /etc/kubernetes/images
    - /etc/kubernetes/manifests
    - /usr/lib/systemd/system/kubelet.service.d

- name: Create kubelet systemd unit file
  template: src=kubelet.service.j2 dest=/usr/lib/systemd/system/kubelet.service

- name: Create kubelet config file
  template: src=10-kubeadm.conf.j2 dest=/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf

- name: Create kubelet params file
  template: src=kubelet.config.j2 dest=/etc/sysconfig/kubelet

- name: Enable kubelet serivce
  shell: systemctl enable kubelet
  ignore_errors: true

- name: Configuration kubectl command completion
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'kubectl completion'
    line: 'source <(kubectl completion bash)'

- block:
  - name: Download kube-master image
    get_url:
      url: "{{ item }}"
      dest: "{{ base_dir }}/k8s"
      timeout: "{{ download_timeout_online }}"
    with_items:
      - "{{ kube_controller_manager_download_url }}"
      - "{{ kube_apiserver_download_url }}"
      - "{{ kube_scheduler_download_url }}"

  - name: Docker | Load kube-master image
    shell: "{{ bin_dir }}/docker load -i {{ base_dir }}/k8s/{{ item }}"
    with_items:
      - kube-controller-manager.tar
      - kube-apiserver.tar
      - kube-scheduler.tar
    when: container_runtime == 'docker'

  - name: Containerd | Load kube-master image
    shell: "{{ bin_dir }}/ctr -n=k8s.io images import {{ base_dir }}/k8s/{{ item }}"
    with_items:
      - kube-controller-manager.tar
      - kube-apiserver.tar
      - kube-scheduler.tar
    when: container_runtime == 'containerd'
  when: inventory_hostname in groups['kube-master']

- block:
  - name: Download kube-proxy pause image
    get_url:
      url: "{{ item }}"
      dest: "{{ base_dir }}/k8s"
      timeout: "{{ download_timeout_online }}"
    with_items:
    - "{{ kube_proxy_download_url }}"
    - "{{ pause_download_url }}"

  - block:
    - name: Docker | Load kube-proxy image
      shell: "{{ bin_dir }}/docker load -i {{ base_dir }}/k8s/{{ item }}"
      with_items:
      - kube-proxy.tar

    - name: Docker | Load pause image
      shell: "{{ bin_dir }}/docker load -i {{ base_dir }}/k8s/{{ item }}"
      with_items:
      - pause.tar
    when: container_runtime == 'docker'

  - block:
    - name: Containerd | Load kube-proxy image
      shell: "{{ bin_dir }}/ctr -n=k8s.io images import {{ base_dir }}/k8s/{{ item }}"
      with_items:
      - kube-proxy.tar

    - name: Containerd | Load pause image
      shell: "{{ bin_dir }}/ctr -n=k8s.io images import {{ base_dir }}/k8s/{{ item }}"
      with_items:
      - pause.tar
    when: container_runtime == 'containerd'
  when: inventory_hostname in (groups['kube-worker'] + groups['new-worker'])