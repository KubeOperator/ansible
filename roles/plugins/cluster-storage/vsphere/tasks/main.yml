- block:
  - name: vSphere | Download govc file
    get_url:
      validate_certs: no
      url: "{{ govc_download_url }}"
      dest: "{{ base_dir }}/"
      timeout: "{{ download_timeout_online }}"

  - name: vSphere | Unarchive govc file
    shell: "gunzip {{ base_dir }}/govc_linux_{{ architectures }}.gz"

  - name: vSphere | Copy govc file
    copy:
      src: "{{ base_dir}}/govc_linux_{{ architectures }}"
      dest: "{{ bin_dir }}/govc"
      remote_src: yes
      mode: "0755"

  - name: vSphere | Remove govc file
    file:
      name: "{{ base_dir }}/govc_linux_{{ architectures }}"
      state: absent

  - name: vSphere | Install jq
    yum:
      name:
      - jq

  - name: vSphere | Create cloud-config directory
    file:
      name: "{{ cloud_config_dir }}"
      state: directory

  - name: vSphere | Prepare setup.sh
    template:
      src: "{{ item }}.j2"
      dest: "{{ cloud_config_dir }}/{{ item }}"
    with_items:
    - setup.sh

  - name: vSphere | Set disk.enableuuid to true for all vms
    shell: "bash setup.sh"
    args:
      chdir: "{{ cloud_config_dir }}"
    no_log: true
    ignore_errors: true

  - name: vSphere | Generate CSI cloud-config
    template:
      src: "{{ item }}.j2"
      dest: "{{ cloud_config_dir }}/{{ item }}"
      mode: 0640
    with_items:
    - vsphere-csi-cloud-config

  - name: vSphere | Prepare vSphere directory
    file:
      name: "{{ kube_config_dir }}/plugins/storage-plugin/vsphere"
      state: directory

  - name: vSphere | Generate Manifests
    template:
      src: "{{ item }}.j2"
      dest: "{{ kube_config_dir }}/plugins/storage-plugin/vsphere/{{ item }}"
    with_items:
    - vsphere-csi-controller-rbac.yml
    - vsphere-csi-controller-ss.yml
    - vsphere-csi-node.yml
    register: vsphere_csi_manifests

  - name: vSphere | Generate a CSI secret manifest
    command: "{{ bin_dir }}/kubectl create secret generic vsphere-config-secret --from-file=csi-vsphere.conf={{ cloud_config_dir }}/vsphere-csi-cloud-config -n kube-system --dry-run --save-config -o yaml"
    register: vsphere_csi_secret_manifest
    no_log: true

  - name: vSphere | Apply a CSI secret manifest
    command:
      cmd: "{{ bin_dir }}/kubectl apply -f -"
      stdin: "{{ vsphere_csi_secret_manifest.stdout }}"
    no_log: true

  - name: vSphere | vSphere CSI Driver | Apply Manifests
    shell: "{{ bin_dir }}/kubectl apply -f {{ kube_config_dir }}/plugins/storage-plugin/vsphere/{{ item.item }}"
    with_items:
    - "{{ vsphere_csi_manifests.results }}"
    loop_control:
      label: "{{ item.item }}"
  when:
  - architectures == 'amd64'